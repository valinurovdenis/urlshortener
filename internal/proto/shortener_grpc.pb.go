// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: internal/proto/shortener.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShortenerHandlerGrpc_Short2LongURL_FullMethodName  = "/shortener.ShortenerHandlerGrpc/Short2LongURL"
	ShortenerHandlerGrpc_Generate_FullMethodName       = "/shortener.ShortenerHandlerGrpc/Generate"
	ShortenerHandlerGrpc_GenerateBatch_FullMethodName  = "/shortener.ShortenerHandlerGrpc/GenerateBatch"
	ShortenerHandlerGrpc_GetUserURLs_FullMethodName    = "/shortener.ShortenerHandlerGrpc/GetUserURLs"
	ShortenerHandlerGrpc_DeleteUserURLs_FullMethodName = "/shortener.ShortenerHandlerGrpc/DeleteUserURLs"
	ShortenerHandlerGrpc_GetStats_FullMethodName       = "/shortener.ShortenerHandlerGrpc/GetStats"
	ShortenerHandlerGrpc_Ping_FullMethodName           = "/shortener.ShortenerHandlerGrpc/Ping"
)

// ShortenerHandlerGrpcClient is the client API for ShortenerHandlerGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerHandlerGrpcClient interface {
	Short2LongURL(ctx context.Context, in *URL, opts ...grpc.CallOption) (*URL, error)
	Generate(ctx context.Context, in *URL, opts ...grpc.CallOption) (*URL, error)
	GenerateBatch(ctx context.Context, in *GenerateBatchRequest, opts ...grpc.CallOption) (*GenerateBatchResponse, error)
	GetUserURLs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*URLMappings, error)
	DeleteUserURLs(ctx context.Context, in *UserURLs, opts ...grpc.CallOption) (*empty.Empty, error)
	GetStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StorageStats, error)
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type shortenerHandlerGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerHandlerGrpcClient(cc grpc.ClientConnInterface) ShortenerHandlerGrpcClient {
	return &shortenerHandlerGrpcClient{cc}
}

func (c *shortenerHandlerGrpcClient) Short2LongURL(ctx context.Context, in *URL, opts ...grpc.CallOption) (*URL, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(URL)
	err := c.cc.Invoke(ctx, ShortenerHandlerGrpc_Short2LongURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerHandlerGrpcClient) Generate(ctx context.Context, in *URL, opts ...grpc.CallOption) (*URL, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(URL)
	err := c.cc.Invoke(ctx, ShortenerHandlerGrpc_Generate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerHandlerGrpcClient) GenerateBatch(ctx context.Context, in *GenerateBatchRequest, opts ...grpc.CallOption) (*GenerateBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateBatchResponse)
	err := c.cc.Invoke(ctx, ShortenerHandlerGrpc_GenerateBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerHandlerGrpcClient) GetUserURLs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*URLMappings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(URLMappings)
	err := c.cc.Invoke(ctx, ShortenerHandlerGrpc_GetUserURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerHandlerGrpcClient) DeleteUserURLs(ctx context.Context, in *UserURLs, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ShortenerHandlerGrpc_DeleteUserURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerHandlerGrpcClient) GetStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StorageStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StorageStats)
	err := c.cc.Invoke(ctx, ShortenerHandlerGrpc_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerHandlerGrpcClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ShortenerHandlerGrpc_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerHandlerGrpcServer is the server API for ShortenerHandlerGrpc service.
// All implementations must embed UnimplementedShortenerHandlerGrpcServer
// for forward compatibility.
type ShortenerHandlerGrpcServer interface {
	Short2LongURL(context.Context, *URL) (*URL, error)
	Generate(context.Context, *URL) (*URL, error)
	GenerateBatch(context.Context, *GenerateBatchRequest) (*GenerateBatchResponse, error)
	GetUserURLs(context.Context, *empty.Empty) (*URLMappings, error)
	DeleteUserURLs(context.Context, *UserURLs) (*empty.Empty, error)
	GetStats(context.Context, *empty.Empty) (*StorageStats, error)
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	mustEmbedUnimplementedShortenerHandlerGrpcServer()
}

// UnimplementedShortenerHandlerGrpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShortenerHandlerGrpcServer struct{}

func (UnimplementedShortenerHandlerGrpcServer) Short2LongURL(context.Context, *URL) (*URL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Short2LongURL not implemented")
}
func (UnimplementedShortenerHandlerGrpcServer) Generate(context.Context, *URL) (*URL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedShortenerHandlerGrpcServer) GenerateBatch(context.Context, *GenerateBatchRequest) (*GenerateBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateBatch not implemented")
}
func (UnimplementedShortenerHandlerGrpcServer) GetUserURLs(context.Context, *empty.Empty) (*URLMappings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserURLs not implemented")
}
func (UnimplementedShortenerHandlerGrpcServer) DeleteUserURLs(context.Context, *UserURLs) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserURLs not implemented")
}
func (UnimplementedShortenerHandlerGrpcServer) GetStats(context.Context, *empty.Empty) (*StorageStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedShortenerHandlerGrpcServer) Ping(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedShortenerHandlerGrpcServer) mustEmbedUnimplementedShortenerHandlerGrpcServer() {}
func (UnimplementedShortenerHandlerGrpcServer) testEmbeddedByValue()                              {}

// UnsafeShortenerHandlerGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerHandlerGrpcServer will
// result in compilation errors.
type UnsafeShortenerHandlerGrpcServer interface {
	mustEmbedUnimplementedShortenerHandlerGrpcServer()
}

func RegisterShortenerHandlerGrpcServer(s grpc.ServiceRegistrar, srv ShortenerHandlerGrpcServer) {
	// If the following call pancis, it indicates UnimplementedShortenerHandlerGrpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShortenerHandlerGrpc_ServiceDesc, srv)
}

func _ShortenerHandlerGrpc_Short2LongURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerHandlerGrpcServer).Short2LongURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerHandlerGrpc_Short2LongURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerHandlerGrpcServer).Short2LongURL(ctx, req.(*URL))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerHandlerGrpc_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerHandlerGrpcServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerHandlerGrpc_Generate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerHandlerGrpcServer).Generate(ctx, req.(*URL))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerHandlerGrpc_GenerateBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerHandlerGrpcServer).GenerateBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerHandlerGrpc_GenerateBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerHandlerGrpcServer).GenerateBatch(ctx, req.(*GenerateBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerHandlerGrpc_GetUserURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerHandlerGrpcServer).GetUserURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerHandlerGrpc_GetUserURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerHandlerGrpcServer).GetUserURLs(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerHandlerGrpc_DeleteUserURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserURLs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerHandlerGrpcServer).DeleteUserURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerHandlerGrpc_DeleteUserURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerHandlerGrpcServer).DeleteUserURLs(ctx, req.(*UserURLs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerHandlerGrpc_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerHandlerGrpcServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerHandlerGrpc_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerHandlerGrpcServer).GetStats(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerHandlerGrpc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerHandlerGrpcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerHandlerGrpc_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerHandlerGrpcServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortenerHandlerGrpc_ServiceDesc is the grpc.ServiceDesc for ShortenerHandlerGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortenerHandlerGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortener.ShortenerHandlerGrpc",
	HandlerType: (*ShortenerHandlerGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Short2LongURL",
			Handler:    _ShortenerHandlerGrpc_Short2LongURL_Handler,
		},
		{
			MethodName: "Generate",
			Handler:    _ShortenerHandlerGrpc_Generate_Handler,
		},
		{
			MethodName: "GenerateBatch",
			Handler:    _ShortenerHandlerGrpc_GenerateBatch_Handler,
		},
		{
			MethodName: "GetUserURLs",
			Handler:    _ShortenerHandlerGrpc_GetUserURLs_Handler,
		},
		{
			MethodName: "DeleteUserURLs",
			Handler:    _ShortenerHandlerGrpc_DeleteUserURLs_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _ShortenerHandlerGrpc_GetStats_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ShortenerHandlerGrpc_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/shortener.proto",
}
