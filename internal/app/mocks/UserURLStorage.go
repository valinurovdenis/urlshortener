// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	utils "github.com/valinurovdenis/urlshortener/internal/app/utils"
)

// UserURLStorage is an autogenerated mock type for the UserURLStorage type
type UserURLStorage struct {
	mock.Mock
}

// Clear provides a mock function with given fields:
func (_m *UserURLStorage) Clear() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserURLs provides a mock function with given fields: _a0, urls
func (_m *UserURLStorage) DeleteUserURLs(_a0 context.Context, urls ...utils.URLsForDelete) error {
	_va := make([]interface{}, len(urls))
	for _i := range urls {
		_va[_i] = urls[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserURLs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...utils.URLsForDelete) error); ok {
		r0 = rf(_a0, urls...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserURLs provides a mock function with given fields: _a0, userID
func (_m *UserURLStorage) GetUserURLs(_a0 context.Context, userID string) ([]utils.URLPair, error) {
	ret := _m.Called(_a0, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserURLs")
	}

	var r0 []utils.URLPair
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]utils.URLPair, error)); ok {
		return rf(_a0, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []utils.URLPair); ok {
		r0 = rf(_a0, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]utils.URLPair)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields:
func (_m *UserURLStorage) Ping() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserURLStorage creates a new instance of UserURLStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserURLStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserURLStorage {
	mock := &UserURLStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
